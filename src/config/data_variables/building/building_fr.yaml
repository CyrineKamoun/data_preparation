region_pbf:
  [
    "https://download.geofabrik.de/europe/france/alsace-latest.osm.pbf",
  "https://download.geofabrik.de/europe/france/champagne-ardenne-latest.osm.pbf",
  "https://download.geofabrik.de/europe/france/lorraine-latest.osm.pbf"
  ]

collection:
  city_gml:
    path_s3: "300001907_LoD2/lod2/"
    relevant_s3_files: ["bb.zip", "be.zip", "bw.zip", "by.zip", "hb.zip", "he.zip", "hh.zip", "mv.zip", "ni.zip", "nw.zip", "rp.zip", "sh.zip", "sl.zip", "sn.zip", "st.zip", "th.zip"] 
    remote_target_schema: "public"
    remote_target_table: "building_germany"
    geographical_extent: "SELECT id, gen, ST_ASTEXT(geom) AS geom FROM germany_states"
    
  osm_tags:
    building: [True]
  additional_columns:
    [
      "amenity",
      "leisure",
      "addr:street",
      "addr:housenumber",
      "building:levels",
      "roof:levels",
    ]
  nodes: True
  ways: True
  relations: False

preparation:
  schema: "basic"
  average_building_levels: 2
  average_roof_levels: 1
  study_area_ids: [1]

  classification:
    residential_status:
      polygon:
        
        building_osm:
          query: "SELECT way AS geom FROM building_osm_fr WHERE amenity IN ('hospital', 'university', 'community_centre', 'school', 'kindergarten', 'recreation_ground', 'wood') OR leisure IN ('zoo')"
          value: "'no_residents'"
          share: 0.5

        building_osm2:
          query: "SELECT way AS geom FROM building_osm_fr WHERE building IN ('apartments', 'bungalow', 'detached', 'dormitory', 'residential', 'house', 'terrace', 'home', 'semidetached_house')"
          value: "'with_residents'"
          share: 0.5

      point:
        poi:
          query: "SELECT count(*) AS count FROM poi_osm_fr p"
          value: "'no_residents'"
          count: 5

      attribute:
        building_type:
          with_residents:
            [
              "Agricole,Indifférencié,Annexe,Résidentiel",
              "Agricole,Indifférencié,Résidentiel",
              "Agricole,Indifférencié,Résidentiel,Annexe",
              "Agricole,Industriel,Indifférencié,Résidentiel",
              "Agricole,Résidentiel",
              "Agricole,Résidentiel,Annexe",
              "Agricole,Résidentiel,Indifférencié",
              "Annexe,Commercial et services,Indifférencié,Résidentiel",
              "Annexe,Commercial et services,Résidentiel",
              "Annexe,Indifférencié,Commercial et services,Résidentiel",
              "Annexe,Indifférencié,Résidentiel",
              "Annexe,Indifférencié,Résidentiel,Agricole",
              "Annexe,Indifférencié,Résidentiel,Commercial et services,Religieux",
              "Annexe,Indifférencié,Sportif,Résidentiel,Commercial et services",
              "Annexe,Religieux,Résidentiel",
              "Annexe,Résidentiel",
              "Annexe,Résidentiel,Indifférencié",
              "Annexe,Résidentiel,Religieux",
              "Commercial et services,Annexe,Résidentiel",
              "Commercial et services,Indifférencié,Annexe,Résidentiel",
              "Commercial et services,Indifférencié,Industriel,Annexe,Résidentiel",
              "Commercial et services,Indifférencié,Résidentiel",
              "Commercial et services,Indifférencié,Résidentiel,Annexe",
              "Commercial et services,Indifférencié,Sportif,Résidentiel",
              "Commercial et services,Résidentiel",
              "Commercial et services,Résidentiel,Annexe",
              "Commercial et services,Résidentiel,Indifférencié",
              "Commercial et services,Résidentiel,Indifférencié,Annexe",
              "Commercial et services,Sportif,Résidentiel",
              "Indifférencié,Agricole,Commercial et services,Annexe,Résidentiel",
              "Indifférencié,Agricole,Résidentiel",
              "Indifférencié,Annexe,Commercial et services,Résidentiel",
              "Indifférencié,Annexe,Résidentiel",
              "Indifférencié,Annexe,Résidentiel,Commercial et services",
              "Indifférencié,Commercial et services,Annexe,Résidentiel",
              "Indifférencié,Commercial et services,Résidentiel",
              "Indifférencié,Commercial et services,Résidentiel,Annexe",
              "Indifférencié,Industriel,Annexe,Résidentiel",
              "Indifférencié,Industriel,Résidentiel",
              "Indifférencié,Religieux,Résidentiel",
              "Indifférencié,Résidentiel",
              "Indifférencié,Résidentiel,Annexe",
              "Indifférencié,Résidentiel,Annexe,Agricole",
              "Indifférencié,Résidentiel,Annexe,Commercial et services",
              "Indifférencié,Résidentiel,Commercial et services",
              "Indifférencié,Résidentiel,Commercial et services,Annexe",
              "Indifférencié,Sportif,Résidentiel,Annexe",
              "Industriel,Commercial et services,Indifférencié,Résidentiel",
              "Industriel,Indifférencié,Annexe,Résidentiel",
              "Industriel,Indifférencié,Résidentiel",
              "Industriel,Résidentiel,Indifférencié",
              "Industriel,Résidentiel,Indifférencié,Annexe",
              "Religieux,Indifférencié,Résidentiel",
              "Religieux,Résidentiel,Commercial et services",
              "Religieux,Résidentiel,Indifférencié",
              "Résidentiel",
              "Résidentiel,Agricole",
              "Résidentiel,Agricole,Annexe",
              "Résidentiel,Annexe",
              "Résidentiel,Annexe,Commercial et services",
              "Résidentiel,Annexe,Indifférencié",
              "Résidentiel,Annexe,Religieux",
              "Résidentiel,Commercial et services",
              "Résidentiel,Commercial et services,Annexe",
              "Résidentiel,Commercial et services,Annexe,Indifférencié",
              "Résidentiel,Commercial et services,Indifférencié",
              "Résidentiel,Indifférencié",
              "Résidentiel,Indifférencié,Annexe",
              "Résidentiel,Indifférencié,Annexe,Agricole",
              "Résidentiel,Indifférencié,Annexe,Religieux,Commercial et services",
              "Résidentiel,Indifférencié,Commercial et services",
              "Résidentiel,Indifférencié,Commercial et services,Annexe",
              "Résidentiel,Industriel",
              "Résidentiel,Religieux",
              "Résidentiel,Religieux,Indifférencié",
              "Résidentiel,Sportif,Indifférencié,Commercial et services",
              "Résidentiel,Sportif,Industriel,Indifférencié",
              "Sportif,Commercial et services,Indifférencié,Résidentiel",
              "Sportif,Indifférencié,Résidentiel"
            ]
          no_residents:
            [
              "Agricole",
              "Agricole,Annexe",
              "Agricole,Annexe,Indifférencié",
              "Agricole,Commercial et services",
              "Agricole,Indifférencié",
              "Agricole,Indifférencié,Annexe",
              "Agricole,Indifférencié,Commercial et services",
              "Annexe",
              "Annexe,Agricole",
              "Annexe,Agricole,Indifférencié",
              "Annexe,Commercial et services",
              "Annexe,Commercial et services,Indifférencié",
              "Annexe,Commercial et services,Religieux",
              "Annexe,Indifférencié",
              "Annexe,Indifférencié,Commercial et services",
              "Annexe,Indifférencié,Commercial et services,Religieux",
              "Annexe,Indifférencié,Religieux",
              "Annexe,Industriel",
              "Annexe,Religieux,Indifférencié",
              "Commercial et services",
              "Commercial et services,Annexe",
              "Commercial et services,Annexe,Indifférencié",
              "Commercial et services,Indifférencié",
              "Commercial et services,Indifférencié,Annexe",
              "Commercial et services,Indifférencié,Industriel",
              "Commercial et services,Industriel",
              "Commercial et services,Industriel,Indifférencié",
              "Commercial et services,Religieux,Indifférencié",
              "Commercial et services,Sportif",
              "Indifférencié",
              "Indifférencié,Agricole",
              "Indifférencié,Agricole,Annexe",
              "Indifférencié,Annexe",
              "Indifférencié,Annexe,Agricole",
              "Indifférencié,Annexe,Commercial et services",
              "Indifférencié,Annexe,Industriel",
              "Indifférencié,Annexe,Religieux",
              "Indifférencié,Commercial et services",
              "Indifférencié,Commercial et services,Agricole",
              "Indifférencié,Commercial et services,Annexe",
              "Indifférencié,Industriel",
              "Indifférencié,Industriel,Commercial et services",
              "Indifférencié,Religieux",
              "Indifférencié,Religieux,Annexe",
              "Indifférencié,Sportif",
              "Indifférencié,Sportif,Industriel",
              "Industriel",
              "Industriel,Agricole",
              "Industriel,Commercial et services",
              "Industriel,Commercial et services,Indifférencié",
              "Industriel,Indifférencié",
              "Industriel,Indifférencié,Annexe",
              "Industriel,Indifférencié,Commercial et services",
              "Religieux",
              "Religieux,Annexe",
              "Religieux,Annexe,Commercial et services",
              "Religieux,Commercial et services",
              "Religieux,Indifférencié",
              "Religieux,Indifférencié,Commercial et services",
              "Sportif",
              "Sportif,Annexe,Indifférencié",
              "Sportif,Indifférencié,Commercial et services"
            ]



        # address:
        #   query: "SELECT count(*) AS count FROM public.ga_germany p"
        #   db: "foreign"
        #   value: "'no_residents'"
        #   count: 0


    building_levels_residential:
      point:
        poi_osm:
          query: "SELECT CASE WHEN count(*) > 0 THEN 1 END AS substract FROM planet_osm_point p WHERE (shop IS NOT NULL	OR	amenity IS NOT NULL	OR	office IS NOT NULL) AND ST_Intersects(b.geom, p.way)"
        polygon:
          query: "SELECT CASE WHEN count(*) > 0 THEN 1 END AS substract FROM osm_poi_fr_polygon p  WHERE (shop IS NOT NULL	OR	amenity IS NOT NULL	OR	office IS NOT NULL) AND ST_Intersects(b.geom, p.way)"
        poi:
          query: "SELECT CASE WHEN count(*) > 0 THEN 1 END AS substract FROM basic.poi p WHERE ST_Intersects(b.geom, p.geom)"
